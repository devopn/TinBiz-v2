from aiogram import Router, types, F
from aiogram.filters import StateFilter
from db.models import *
from db import service
from states import RegistrationState
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendPhoto

router = Router()

from keyboards.fields_keyboard import get_fields_keyboard
from states import fields, PhotoEnum

@router.message(StateFilter(RegistrationState.name))
async def reg_name(message: types.Message, state:FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 2 –∏–∑ 5\n<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç</i>", parse_mode="HTML")
    await state.set_state(RegistrationState.age)


@router.message(StateFilter(RegistrationState.age))
async def reg_age(message: types.Message, state:FSMContext):
    data = message.text
    if not data.isdigit():
        await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 2 –∏–∑ 5\n<i>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</i>", parse_mode="HTML")
    elif not 10 <= int(data) < 100:
        await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 2 –∏–∑ 5\n<i>–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 99</i>", parse_mode="HTML")
    else:
        await state.update_data(age=int(data))
        await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 3 –∏–∑ 5\n<i>–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?</i>", parse_mode="HTML")
        await state.set_state(RegistrationState.city)

@router.message(StateFilter(RegistrationState.city))
async def reg_city(message: types.Message, state:FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 4 –∏–∑ 5\n<i>–í–∞—à–∞ —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</i>", parse_mode="HTML", reply_markup=get_fields_keyboard())
    await state.set_state(RegistrationState.field)

@router.message(StateFilter(RegistrationState.field))
async def reg_field(message: types.Message, state:FSMContext):
    data = message.text
    if data not in fields:
        await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 4 –∏–∑ 5\n<i>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</i>", parse_mode="HTML", reply_markup=get_fields_keyboard())
    else:
        await state.update_data(field=data)

        reg_image:Image = await service.get_image(PhotoEnum.reg_example)
        if reg_image is None:
            data = types.FSInputFile(f"img/{PhotoEnum.reg_example}")
            photo = await message.answer_photo(data)

            await service.create_image(PhotoEnum.reg_example, photo.photo[0].file_id)
        else:
            await message.answer_photo(photo=reg_image.id)

        await message.answer("üîñ<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n–®–∞–≥ 5 –∏–∑ 5\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫–∞–∫–æ–π –æ–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ, –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã)  </i>", parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(RegistrationState.about)

@router.message(StateFilter(RegistrationState.about))
async def reg_about(message: types.Message, state:FSMContext):
    await state.update_data(about=message.text)
    data = await state.get_data()
    photos = await message.from_user.get_profile_photos().bot.get_user_profile_photos(message.from_user.id)

    if len(photos.photos) == 0:
        photo = await service.get_image(PhotoEnum.default_photo)
        if photo is None:
            data = types.FSInputFile(f"img/{PhotoEnum.default_photo}")
            photo = await message.answer_photo(data)
            await service.create_image(PhotoEnum.default_photo, photo.photo[0].file_id)
            photo = photo.photo[0].file_id
    else:
        photo = photos.photos[0][0].file_id
    
    user = User(
        id = message.from_user.id,
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏"),
        username = message.from_user.username,
        age = data.get("age", 18),
        city = data.get("city", "–ë–µ–∑ –≥–æ—Ä–æ–¥–∞"),
        field = data.get("field", "–ë–µ–∑ —Å—Ñ–µ—Ä—ã"),
        about = data.get("about", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
        photo = photo
    )
    await service.create_user(user)
    await state.clear()
    await message.answer("–ê–Ω–∫–µ—Ç—É –ø–æ–ª—É—á–∏–ª–∏, —Å–ø–∞—Å–∏–±–æ! –ï—ë –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–π–º—ë—Ç –¥–æ –¥–≤—É—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –±—ã—Å—Ç—Ä–µ–µ. –û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–∞–ø–∏—à–µ–º –≤ —ç—Ç–æ—Ç –±–æ—Ç.", parse_mode="HTML")


@router.callback_query(F.data == "cancel_moderate")
async def cancel_moderate(call: types.CallbackQuery):
    await service.delete_user(id=call.from_user.id)
    await call.answer()
    await call.message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!", reply_markup=types.ReplyKeyboardRemove())
